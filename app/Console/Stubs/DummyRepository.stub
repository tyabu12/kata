<?php

namespace App\Shop\Dummies\Repositories;

use App\Shop\Dummies\Dummy;
use App\Shop\Dummies\Repositories\Interfaces\DummyRepositoryInterface;
use Illuminate\Database\QueryException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Collection;
use Jsdecena\Baserepo\BaseRepository;
use \InvalidArgumentException;

class DummyRepository extends BaseRepository implements DummyRepositoryInterface
{
    /**
     * DummyRepository constructor.
     *
     * @param Dummy $dummy
     */
    public function __construct(Dummy $dummy)
    {
        parent::__construct($dummy);
        $this->model = $dummy;
    }

    /**
     * List all the dummies
     *
     * @param string $order
     * @param string $sort
     * @param string[] $columns
     * @return Collection
     */
    public function listDummies(string $order = 'id', string $sort = 'desc', array $columns = ['*']): Collection
    {
        return $this->all($columns, $order, $sort);
    }

    /**
     * Create a dummy
     *
     * @param array $params
     * @return Dummy
     * @throws InvalidArgumentException
     */
    public function createDummy(array $params): Dummy
    {
        try {
            $dummy = new Dummy($params);
            $dummy->saveOrFail();
            return $dummy;
        } catch (QueryException $e) {
            throw new InvalidArgumentException($e->getMessage(), $e->getCode(), $e);
        }
    }

    /**
     * Update the dummy
     *
     * @param array $params
     * @return bool
     * @throws InvalidArgumentException
     */
    public function updateDummy(array $params): bool
    {
        try {
            return $this->update($params);
        } catch (QueryException $e) {
            throw new InvalidArgumentException($e->getMessage(), $e->getCode(), $e);
        }
    }

    /**
     * Find the dummy by ID
     *
     * @param int $id
     * @return Dummy
     * @throws ModelNotFoundException
     */
    public function findDummyById(int $id): Dummy
    {
        try {
            return $this->findOneOrFail($id);
        } catch (ModelNotFoundException $e) {
            throw new ModelNotFoundException($e->getMessage(), $e->getCode(), $e);
        }
    }

    /**
     * Delete the dummy
     *
     * @return bool
     */
    public function deleteDummy(): bool
    {
        return (bool) $this->delete();
    }
}
